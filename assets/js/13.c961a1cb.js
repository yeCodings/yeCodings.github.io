(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{451:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"_1-javascript有哪些数据类型-它们的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-javascript有哪些数据类型-它们的区别"}},[t._v("#")]),t._v(" 1. JavaScript有哪些数据类型，它们的区别？")]),t._v(" "),a("p",[a("code",[t._v("JavaScript")]),t._v("共有八种数据类型，分别是")]),t._v(" "),a("p",[a("code",[t._v("Undefined")]),t._v(": 未定义的值，只有 "),a("code",[t._v("Undefined")]),t._v("自身；")]),t._v(" "),a("p",[a("code",[t._v("Null")]),t._v(": 空值，只有"),a("code",[t._v("Null")]),t._v("自身；")]),t._v(" "),a("p",[a("code",[t._v("Boolean")]),t._v(": 布尔值， "),a("code",[t._v("true")]),t._v(" 或 "),a("code",[t._v("false")]),t._v(";")]),t._v(" "),a("p",[a("code",[t._v("Number")]),t._v(": 数值， 自然数；")]),t._v(" "),a("p",[a("code",[t._v("String")]),t._v(": 字符串；")]),t._v(" "),a("p",[a("code",[t._v("Object")]),t._v(": 对象类型，一切皆对象；")]),t._v(" "),a("p",[a("code",[t._v("Symbol")]),t._v(": 独一无二且不可变的数据类型；")]),t._v(" "),a("p",[a("code",[t._v("BigInt")]),t._v(": 数字类型的数据，它可以表示任意精度格式的整数；")]),t._v(" "),a("p",[t._v("其中 "),a("code",[t._v("Symbol")]),t._v(" 和 "),a("code",[t._v("BigInt")]),t._v(" 是ES6 中新增的数据类型：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。\n\nBigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和\n操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围\n")])])]),a("p",[t._v("这些数据可以分为原始数据类型和引用数据类型：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("栈：原始数据类型（Undefined、Null、Boolean、Number、String）\n堆：引用数据类型（对象、数组和函数）\n")])])]),a("p",[t._v("两种类型的区别在于"),a("strong",[t._v("存储位置")]),t._v("的不同：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，\n所以放入栈中存储；\n引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序\n运行的性能；\n引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先\n检索其在栈中的地址，取得地址后从堆中获得实体。\n")])])]),a("p",[t._v("堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("在数据结构中，栈中数据的存取方式为先进后出。\n堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。\n")])])]),a("p",[t._v("在操作系统中，内存被分为栈区和堆区：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。\n")])])]),a("h3",{attrs:{id:"_2-数据类型的检测方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型的检测方式有哪些"}},[t._v("#")]),t._v(" 2. 数据类型的检测方式有哪些？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("typeof")]),t._v(" 判断基本数据类型")]),t._v(" "),a("li",[a("code",[t._v("instanceof")]),t._v(" 可以正确判断对象的类型")]),t._v(" "),a("li",[a("code",[t._v("constructor")]),t._v(" 基本数据类型和简单的对象类型")]),t._v(" "),a("li",[a("code",[t._v("Object.prototype.toString.call()")]),t._v(" 推荐使用")])]),t._v(" "),a("ul",[a("li",[t._v("typeof")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("console.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeof "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               // number\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeof "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            // boolean\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeof "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'str'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           // string\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeof "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              // object    \nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeof "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    // "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeof "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              // object\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeof undefined"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       // undefined\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeof null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            // object\n\n其中数组、对象、null都会被判断为object，其他判断都正确。\n")])])]),a("ul",[a("li",[t._v("instanceof")])]),t._v(" "),a("p",[a("code",[t._v("instanceof")]),t._v("可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("console.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" instanceof Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("true instanceof Boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" \nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'str'")]),t._v(" instanceof String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" \n \nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" instanceof Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" instanceof Function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" instanceof Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                   // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n可以看到，instanceof只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可\n以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。\n")])])]),a("ul",[a("li",[t._v("constructor")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("console.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'str'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("p",[t._v("constructor有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。\n需要注意，如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \nFn.prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \nvar f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f.constructor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f.constructor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Object.prototype.toString.call() 使用 Object 对象的原型方法 toString 来判断数据类型：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("var a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object.prototype.toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'str'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("undefined"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nObject.prototype.toString.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".slice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(",-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Array'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-intanceof-操作符的实现原理及实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-intanceof-操作符的实现原理及实现"}},[t._v("#")]),t._v(" 3. intanceof 操作符的实现原理及实现")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" myInstanceof"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left, right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  // 获取对象的原型\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object.getPrototypeOf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  // 获取构造函数的 prototype 对象\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right.prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n \n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\n    proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object.getPrototypeOf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"_4-object-assign和扩展运算法是深拷贝还是浅拷贝-两者区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-object-assign和扩展运算法是深拷贝还是浅拷贝-两者区别"}},[t._v("#")]),t._v(" 4. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别")]),t._v(" "),a("p",[t._v("扩展运算符：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" outObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  inObj: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(", b: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" newObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".outObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nnewObj.inObj.a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("inObj: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(", b: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Object.assign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" outObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  inObj: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(", b: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" newObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object.assign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(", outObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnewObj.inObj.a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("inObj: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(", b: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以看到，两者都是浅拷贝。")]),t._v(" "),a("p",[t._v("Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象\n合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。\n扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的\n属性或类的属性，但是它会复制ES6的 symbols 属性。")]),t._v(" "),a("h3",{attrs:{id:"_5-在-js-中不同进制数字的表示方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-在-js-中不同进制数字的表示方式"}},[t._v("#")]),t._v(" 5. 在 js 中不同进制数字的表示方式？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("以 0X、0x 开头的表示为十六进制。\n\n以 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("、0O、0o 开头的表示为八进制。\n\n以 0B、0b 开头的表示为二进制格式\n")])])]),a("h3",{attrs:{id:"_6-js-中整数的安全范围是多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-js-中整数的安全范围是多少"}},[t._v("#")]),t._v(" 6. js 中整数的安全范围是多少？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("安全整数指的是，在这个范围内的整数转化为二进制存储的时候不会出现精度丢失，\n能够被“安全”呈现的最大整数是 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("^53 - "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，\n即9007199254740991，在 ES6 中被定义为 Number.MAX_SAFE_INTEGER。\n最小整数是-9007199254740991，在 ES6 中被定义为 Number.MIN_SAFE_INTEGER。\n\n如果某次计算的结果得到了一个超过 JavaScript 数值范围的值，那么这个值会被自动转\n换为特殊的 Infinity 值。如果某次计算返回了正或负的 Infinity 值，那么该值将无法\n参与下一次的计算。判断一个数是不是有穷的，可以使用 isFinite 函数来判断。\n")])])]),a("h3",{attrs:{id:"_7-typeof-nan-的结果是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-typeof-nan-的结果是什么"}},[t._v("#")]),t._v(" 7. typeof NaN 的结果是什么？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("NaN 意指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊\n用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\n\ntypeof NaN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),t._v("\n\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x 不成立）\n的值。而 NaN "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" NaN为 true。\n")])])]),a("h3",{attrs:{id:"_8-isnan-和-number-isnan-函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-isnan-和-number-isnan-函数的区别"}},[t._v("#")]),t._v(" 8. isNaN 和 Number.isNaN 函数的区别？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，\n因此非数字值传入也会返回 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" ，会影响 NaN 的判断。\n\n函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，这种方法\n对于 NaN 的判断更为准确。\n")])])]),a("h3",{attrs:{id:"_9-其他值到字符串的转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-其他值到字符串的转换规则"}},[t._v("#")]),t._v(" 9. 其他值到字符串的转换规则？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("规范的 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.8")]),t._v(" 节中定义了抽象操作 ToString ，它负责处理非字符串到字符串的强制类型转换。\n\n（1）Null 和 Undefined 类型 ，null 转换为 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"null"')]),t._v("，undefined 转换为 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"undefined"')]),t._v("，\n\n（2）Boolean 类型，true 转换为 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),t._v("，false 转换为 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),t._v("。\n\n（3）Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\n\n（4）Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\n\n（3）对普通对象来说，除非自行定义 toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 方法，否则会调用 toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n （Object.prototype.toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("）来返回内部属性 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 的值，如"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[object Object]"')]),t._v("。\n  如果对象有自己的 toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 方法，字符串化时就会调用该方法并使用其返回值。\n")])])]),a("h3",{attrs:{id:"_10-其他值到数字值的转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-其他值到数字值的转换规则"}},[t._v("#")]),t._v(" 10. 其他值到数字值的转换规则？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("有时我们需要将非数字值当作数字来使用，比如数学运算。为此 ES5 规范在 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.3")]),t._v(" 节定义了\n抽象操作 ToNumber。\n\n（1）Undefined 类型的值转换为 NaN。\n\n（2）Null 类型的值转换为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("。\n\n（3）Boolean 类型的值，true 转换为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，false 转换为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("。\n\n（4）String 类型的值转换如同使用 Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 函数进行转换，如果包含非数字值则转换为 NaN，\n    空字符串为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("。\n\n（5）Symbol 类型的值不能转换为数字，会报错。\n\n（6）对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵\n    循以上规则将其强制转换为数字。\n\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）\n检查该值是否有valueOf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有\n就使用 toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 的返回值（如果存在）来进行强制类型转换。\n\n如果 valueOf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 和 toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 均不返回基本类型值，会产生 TypeError 错误。\n")])])]),a("h3",{attrs:{id:"_11-和-的-valueof-和-tostring-的结果是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-和-的-valueof-和-tostring-的结果是什么"}},[t._v("#")]),t._v(" 11. {} 和 [] 的 valueOf 和 toString 的结果是什么？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" 的 valueOf 结果为 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" ，toString 的结果为 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[object Object]"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 的 valueOf 结果为 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ，toString 的结果为 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n")])])]),a("h3",{attrs:{id:"_12-什么是假值对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-什么是假值对象"}},[t._v("#")]),t._v(" 12. 什么是假值对象?")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("浏览器在某些特定情况下，在常规 JavaScript 语法基础上自己创建了一些外来值，这些就是“假值对象”。\n假值对象看起来和普通对象并无二致（都有属性，等等），但将它们强制类型转换为布尔值时结果为 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n最常见的例子是 document.all，它是一个类数组对象，包含了页面上的所有元素，由 DOM（而不是 \nJavaScript 引擎）提供给 JavaScript 程序使用。\n")])])]),a("h3",{attrs:{id:"_13-操作符的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-操作符的作用"}},[t._v("#")]),t._v(" 13. ~ 操作符的作用？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("~ 返回 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 的补码，并且 ~ 会将数字转换为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v(" 位整数，因此我们可以使用 ~ 来进行取整操作。\n\n~x 大致等同于 -"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x+1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("。\n")])])]),a("h3",{attrs:{id:"_14-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么"}},[t._v("#")]),t._v(" 14.  解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("解析允许字符串（如 parseInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ）中含有非数字字符，解析按从左到右的顺序，如果遇到非数字字符就\n停止。而转换（如 Number "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("）不允许出现非数字字符，否则会失败并返回 NaN。\n")])])]),a("h3",{attrs:{id:"_15-什么情况下会发生布尔值的隐式强制类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-什么情况下会发生布尔值的隐式强制类型转换"}},[t._v("#")]),t._v(" 15. 什么情况下会发生布尔值的隐式强制类型转换？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("（1） "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 语句中的条件判断表达式。\n（2） "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 语句中的条件判断表达式（第二个）。\n（3） "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 和 do"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("while"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 循环中的条件判断表达式。\n（4） ? "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" 中的条件判断表达式。\n（5） 逻辑运算符 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("（逻辑或）和 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("（逻辑与）左边的操作数（作为条件判断表达式）。\n")])])]),a("h3",{attrs:{id:"_16-symbol-值的强制类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-symbol-值的强制类型转换"}},[t._v("#")]),t._v(" 16. Symbol 值的强制类型转换？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ES6 允许从符号到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误。\n\nSymbol 值不能够被强制类型转换为数字（显式和隐式都会产生错误），但可以被强制类型转换为布尔值\n（显式和隐式结果都是 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" ）。\n")])])]),a("h3",{attrs:{id:"_17-如何将字符串转化为数字-例如-12-3b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-如何将字符串转化为数字-例如-12-3b"}},[t._v("#")]),t._v(" 17. 如何将字符串转化为数字，例如 '12.3b'?")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("（1）使用 Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 方法，前提是所包含的字符串不包含不合法字符。\n\n（2）使用 parseInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 方法，parseInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 函数可解析一个字符串，并返回一个整数。还可以设置要\n    解析的数字的基数。当基数的值为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("，或没有设置该参数时，parseInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 会根据 string 来判断\n    数字的基数。\n\n（3）使用 parseFloat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 方法，该函数解析一个字符串参数并返回一个浮点数。\n\n（4）使用 + 操作符的隐式转换。\n")])])]),a("h3",{attrs:{id:"_18-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』"}},[t._v("#")]),t._v(" 18. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" number.replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/g, "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_19-常用正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-常用正则表达式"}},[t._v("#")]),t._v(" 19. 常用正则表达式")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("// （1）匹配 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" 进制颜色值\nvar regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;")]),t._v("\n\n// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("-9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("-9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("-2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("-9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("-9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("01"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// （3）匹配 qq 号\nvar regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("-9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("-9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4,10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("$/g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// （4）手机号码正则\nvar regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /^1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("34578")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("$/g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// （5）用户名正则\nvar regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a-zA-Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a-zA-Z0-9_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4,16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("$/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_20-javascript-创建对象的几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-javascript-创建对象的几种方式"}},[t._v("#")]),t._v(" 20. javascript 创建对象的几种方式？")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("我们一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量\n的重复代码。但 js和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是我们可以使用函数\n来进行模拟，从而产生出可复用的对象创建方式，我了解到的方式有这么几种：\n\n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来\n  达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的\n  封装了复用代码，而没有建立起对象和类型间的关系。\n\n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，\n  那么我们就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的\n  prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是\n  对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此我们可以使用 this 给对象赋值。\n  构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此我们可以通过原型来\n  识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数\n  也是一个对象，因此如果对象属性中如果包含函数的话，那么每次我们都会新建一个函数对象，浪费了不必要\n  的内存空间，因为函数是所有的实例都可以通用的。\n\n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了\n  通过构造函数创建的所有实例都能共享的属性和方法。因此我们可以使用原型对象来添加公用属性和方法，\n  从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存\n  在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的\n  值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\n\n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式\n  和原型模式分开使用都存在一些问题，因此我们可以组合使用这两种模式，通过构造函数来初始化对象的\n  属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一\n  点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\n\n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对\n  属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对\n  上面的混合模式进行了封装。\n\n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，\n  它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，\n  也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。\n")])])]),a("hr")])}),[],!1,null,null,null);a.default=e.exports}}]);